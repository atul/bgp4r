#--
#
# Copyright 2008, 2009 Jean-Michel Esnault.
# All rights reserved.
# See LICENSE.txt for permissions.
#
#++

require 'bgp4r'
require 'yaml'
include BGP

require 'pp'
config_file = ARGV[0] ||= File.basename($0) + ".yml"

Log.create
Log.level=Logger::DEBUG
config = YAML::load_file(config_file)

config.keys.each do |k|
  case k
  when 'neighbor'
    neighbor = config['neighbor']
    neighbor.keys.each do |k|
      case k
      when /router\s+id/        ; @router_id = neighbor[k]
      when /my\s+as/            ; @my_as = neighbor[k]
      when 'holdtime'           ; @holdtime = neighbor[k]
      when /neighbor\s+address/ ; @neighbor_addr = neighbor[k]
      when /local\s+address/    ; @local_addr = neighbor[k]
      when 'capabilities'
      end
    end
  when 'routes'
    routes = config['routes']
    routes.keys.each do |k|
      case k
      when /nlri(|s)/
        _pfx, _npfx, _pack = routes[k].split(',')
        @nlri = IPAddr.new _pfx
        @times = _npfx.to_i ||=1
        @pack = _pack.to_i  ||=1 
      when /next\s*hop/     ; @nexthop= routes[k]
      when /local\s*pref/   ; @local_pref= routes[k]
      when /med/          ; @med = routes[k]
      when /origin/       ; @origin = routes[k]
      when /communities/  ; @communities = routes[k]
      when /as\s*path/      ; @as_path= routes[k]
      end
    end
  end
end

neighbor = Neighbor.new \
  :version => 4,
  :my_as=> @my_as,
  :remote_addr => @neighbor_addr,
  :local_addr => @local_addr,
  :id=> @router_id,
  :holdtime=> @holdtime
  neighbor.capability :mbgp, :ipv4, :unicast
  neighbor.capability :mbgp, :ipv6, :unicast
  neighbor.capability :route_refresh
  neighbor.capability :route_refresh, 128
  neighbor.capability :as4_byte
  
@nexthop = "2210:210:3:2::6"
pa = Path_attribute.new(
  Origin.new(@origin),
  Next_hop.new(@nexthop),
  Local_pref.new(@local_pref),
  Communities.new(*(@communities.split.map { |com| com.to_i})),
  As_path.new(*(@as_path.split.map { |as| as.to_i}))
)

@nexthop = "2210:210:3:2::6"
pa6 = Path_attribute.new(
  Origin.new(@origin),
  Next_hop.new(@nexthop),
  Local_pref.new(@local_pref),
  Communities.new(*(@communities.split.map { |com| com.to_i})),
  As_path.new(*(@as_path.split.map { |as| as.to_i}))
)

neighbor.start

i = 1

while i < 110 do

#@nlri = IPAddr.new "#{2*i}.0.0.0/24"

#nlris = Nlri.new
#(1..@times.to_i).each do |n|
#  nlris << (@nlri ^ n)
#  next unless (n % @pack) == 0 or (n == @times)
#  neighbor.send_message Update.new(pa, nlris)
#  nlris = Nlri.new
#end

@pack6 = 32
@times = 8000
@nlri6 = IPAddr.new "1000:10:10:10::0/96"
(1..@times6.to_i).each do |n|
  
#  nlris <<  @nlri6.succ
  nlris << ( @nlri6.<< 1)
  pp nlris
  next unless (n % @pack6) == 0 or (n == @times6)
  neighbor.send_message Update.new(pa, nlris)
  nlris = Nlri.new
end


sleep(1200)

withdrwas = Withdrawn.new
(1..@times.to_i).each do |n|
  withdrwas << (@nlri ^ n)
  next unless (n % @pack) == 0 or (n == @times)
  neighbor.send_message Update.new(pa, withdrwas)
  withdrwas = Withdrawn.new
end

sleep(50)

i += 2

end

sleep(144000)
